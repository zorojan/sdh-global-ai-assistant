const sqlite3 = require('sqlite3');
const bcrypt = require('bcryptjs');
const path = require('path');

const dbPath = path.join(__dirname, 'backend', 'database.sqlite');
const db = new sqlite3.Database(dbPath);

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

db.get('SELECT username, password_hash FROM admin_users WHERE username = ?', ['admin'], async (err, row) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
    db.close();
    return;
  }
  
  if (row) {
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', row.username);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
    const testPasswords = ['admin123', 'admin', 'password', '123456'];
    
    for (const pwd of testPasswords) {
      try {
        const isValid = await bcrypt.compare(pwd, row.password_hash);
        console.log(`üîë –ü–∞—Ä–æ–ª—å '${pwd}': ${isValid ? '‚úÖ –ü–û–î–•–û–î–ò–¢' : '‚ùå –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'}`);
      } catch (error) {
        console.log(`üîë –ü–∞—Ä–æ–ª—å '${pwd}': ‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      }
    }
  } else {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  }
  
  db.close();
});
