'use client';

import { useState, useEffect } from 'react';
import { CheckCircleIcon, XCircleIcon, ClockIcon } from '@heroicons/react/24/outline';

interface TestResult {
  name: string;
  status: 'pending' | 'success' | 'error';
  message: string;
  timestamp: string;
  duration?: number;
}

interface ConnectionLog {
  timestamp: string;
  type: 'info' | 'warning' | 'error' | 'success';
  message: string;
}

export default function TestPage() {
  const [tests, setTests] = useState<TestResult[]>([]);
  const [logs, setLogs] = useState<ConnectionLog[]>([]);
  const [isRunning, setIsRunning] = useState(false);
  const [autoRefresh, setAutoRefresh] = useState(false);

  const addLog = (type: ConnectionLog['type'], message: string) => {
    const newLog: ConnectionLog = {
      timestamp: new Date().toLocaleTimeString(),
      type,
      message
    };
    setLogs(prev => [newLog, ...prev].slice(0, 100)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 100 –∑–∞–ø–∏—Å—è–º–∏
  };

  const runTest = async (name: string, testFn: () => Promise<any>): Promise<TestResult> => {
    const startTime = Date.now();
    addLog('info', `–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${name}`);
    
    try {
      const result = await testFn();
      const duration = Date.now() - startTime;
      
      addLog('success', `‚úÖ ${name} - —É—Å–ø–µ—à–Ω–æ (${duration}ms)`);
      
      return {
        name,
        status: 'success',
        message: result.message || '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        timestamp: new Date().toLocaleString(),
        duration
      };
    } catch (error: any) {
      const duration = Date.now() - startTime;
      
      addLog('error', `‚ùå ${name} - –æ—à–∏–±–∫–∞: ${error.message}`);
      
      return {
        name,
        status: 'error',
        message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        timestamp: new Date().toLocaleString(),
        duration
      };
    }
  };

  // –¢–µ—Å—Ç Backend API
  const testBackendAPI = async () => {
    const response = await fetch('http://localhost:3001/api/health');
    
    if (!response.ok) {
      throw new Error(`Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`);
    }
    
    const data = await response.json();
    return { message: `Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${data.message}` };
  };

  // –¢–µ—Å—Ç Frontend –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  const testFrontendAPI = async () => {
    const response = await fetch('http://localhost:5173/');
    
    if (!response.ok) {
      throw new Error(`Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`);
    }
    
    return { message: 'Frontend –¥–æ—Å—Ç—É–ø–µ–Ω' };
  };

  // –¢–µ—Å—Ç Gemini API –∫–ª—é—á–∞
  const testGeminiAPI = async () => {
    const response = await fetch('/api/test/gemini');
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Gemini API (${response.status})`);
    }
    
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.error || 'Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    return { message: `Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç (${data.modelsCount} –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ)` };
  };

  // –¢–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const testWebSocket = async () => {
    return new Promise((resolve, reject) => {
      try {
        const ws = new WebSocket('ws://localhost:3001');
        let resolved = false;
        
        const timeout = setTimeout(() => {
          if (!resolved) {
            resolved = true;
            ws.close();
            reject(new Error('WebSocket —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (5—Å)'));
          }
        }, 5000);
        
        ws.onopen = () => {
          if (!resolved) {
            resolved = true;
            clearTimeout(timeout);
            ws.close();
            resolve({ message: 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ' });
          }
        };
        
        ws.onerror = () => {
          if (!resolved) {
            resolved = true;
            clearTimeout(timeout);
            reject(new Error('WebSocket –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'));
          }
        };
        
        ws.onclose = (event) => {
          addLog('warning', `WebSocket –∑–∞–∫—Ä—ã—Ç: –∫–æ–¥ ${event.code}, –ø—Ä–∏—á–∏–Ω–∞: ${event.reason || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        };
        
      } catch (error: any) {
        reject(new Error(`WebSocket –æ—à–∏–±–∫–∞: ${error.message}`));
      }
    });
  };

  // –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Gemini
  const testGeminiConnection = async () => {
    addLog('info', '–ù–∞—á–∏–Ω–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Gemini...');
    
    for (let i = 1; i <= 5; i++) {
      addLog('info', `–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${i}/5`);
      
      try {
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini Live API
        const response = await fetch('/api/test/gemini-live', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ attempt: i })
        });
        
        if (!response.ok) {
          throw new Error(`–ü–æ–ø—ã—Ç–∫–∞ ${i} –Ω–µ—É–¥–∞—á–Ω–∞: ${response.status}`);
        }
        
        addLog('success', `–ü–æ–ø—ã—Ç–∫–∞ ${i} —É—Å–ø–µ—à–Ω–∞`);
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
        
      } catch (error: any) {
        addLog('error', `–ü–æ–ø—ã—Ç–∫–∞ ${i} –æ—à–∏–±–∫–∞: ${error.message}`);
        
        if (i === 3) {
          throw new Error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å 3-–π –ø–æ–ø—ã—Ç–∫–∏');
        }
      }
    }
    
    return { message: '–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω' };
  };

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  const runAllTests = async () => {
    setIsRunning(true);
    setTests([]);
    addLog('info', 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...');
    
    const testSuite = [
      { name: 'Backend API', fn: testBackendAPI },
      { name: 'Frontend –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', fn: testFrontendAPI },
      { name: 'Gemini API –∫–ª—é—á', fn: testGeminiAPI },
      { name: 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', fn: testWebSocket },
      { name: '–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ Gemini', fn: testGeminiConnection }
    ];
    
    const results: TestResult[] = [];
    
    for (const test of testSuite) {
      const result = await runTest(test.name, test.fn);
      results.push(result);
      setTests([...results]);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    setIsRunning(false);
    addLog('info', '‚úÖ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  };

  // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
  const clearLogs = () => {
    setLogs([]);
    addLog('info', '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
  };

  // Auto-refresh
  useEffect(() => {
    if (autoRefresh) {
      const interval = setInterval(() => {
        runTest('Health Check', testBackendAPI);
      }, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      
      return () => clearInterval(interval);
    }
  }, [autoRefresh]);

  const getStatusIcon = (status: TestResult['status']) => {
    switch (status) {
      case 'success':
        return <CheckCircleIcon className="w-5 h-5 text-green-500" />;
      case 'error':
        return <XCircleIcon className="w-5 h-5 text-red-500" />;
      case 'pending':
        return <ClockIcon className="w-5 h-5 text-yellow-500" />;
      default:
        return <ClockIcon className="w-5 h-5 text-gray-500" />;
    }
  };

  const getLogColor = (type: ConnectionLog['type']) => {
    switch (type) {
      case 'success': return 'text-green-400';
      case 'error': return 'text-red-400';
      case 'warning': return 'text-yellow-400';
      default: return 'text-blue-400';
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h1>
        <p className="text-gray-600 mt-2">
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å AI –∞–≥–µ–Ω—Ç–æ–º
        </p>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="bg-white rounded-lg shadow p-6 mb-6">
        <div className="flex flex-wrap gap-4 items-center">
          <button
            onClick={runAllTests}
            disabled={isRunning}
            className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg flex items-center gap-2"
          >
            {isRunning ? (
              <>
                <ClockIcon className="w-4 h-4 animate-spin" />
                –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...
              </>
            ) : (
              'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã'
            )}
          </button>
          
          <button
            onClick={clearLogs}
            className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
          </button>
          
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={autoRefresh}
              onChange={(e) => setAutoRefresh(e.target.checked)}
              className="rounded"
            />
            <span className="text-sm text-gray-600">–ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</span>
          </label>
        </div>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –°—Ç–∞—Ç—É—Å—ã —Ç–µ—Å—Ç–æ–≤ */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-4 border-b">
            <h2 className="text-lg font-semibold">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h2>
          </div>
          <div className="p-4">
            {tests.length === 0 ? (
              <p className="text-gray-500 text-center py-8">
                –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
              </p>
            ) : (
              <div className="space-y-3">
                {tests.map((test, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      {getStatusIcon(test.status)}
                      <div>
                        <div className="font-medium">{test.name}</div>
                        <div className="text-sm text-gray-600">{test.message}</div>
                      </div>
                    </div>
                    <div className="text-right text-xs text-gray-500">
                      <div>{test.timestamp}</div>
                      {test.duration && <div>{test.duration}ms</div>}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* –õ–æ–≥–∏ */}
        <div className="bg-gray-900 rounded-lg text-white">
          <div className="p-4 border-b border-gray-700">
            <h2 className="text-lg font-semibold">üìã –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h2>
          </div>
          <div className="p-4 h-96 overflow-y-auto font-mono text-sm">
            {logs.length === 0 ? (
              <p className="text-gray-400 text-center py-8">
                –õ–æ–≥–∏ –ø—É—Å—Ç—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
              </p>
            ) : (
              <div className="space-y-1">
                {logs.map((log, index) => (
                  <div key={index} className="flex gap-2">
                    <span className="text-gray-500">[{log.timestamp}]</span>
                    <span className={getLogColor(log.type)}>{log.message}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
