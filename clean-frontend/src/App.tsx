import { useState, useEffect, useRef } from 'react'
import './index.css'
import { GoogleGenerativeAI } from '@google/generative-ai'

interface Agent {
  id: string
  name: string
  personality: string
  description?: string
  is_active: number
}

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

interface UserProfile {
  name: string
  info: string
}

function App() {
  const [step, setStep] = useState<'setup' | 'chat'>('setup')
  const [userProfile, setUserProfile] = useState<UserProfile>({ name: '', info: '' })
  const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null)
  const [agents, setAgents] = useState<Agent[]>([])
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isTyping, setIsTyping] = useState(false)
  const [apiKey, setApiKey] = useState('')
  const [genAI, setGenAI] = useState<GoogleGenerativeAI | null>(null)
  const [model, setModel] = useState<any>(null)
  
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  const loadData = async () => {
    try {
      setIsLoading(true)
      setError(null)
      
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...')

      // –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
      console.log('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API –∫–ª—é—á...')
      const keyResponse = await fetch('http://localhost:3001/api/public/apikey')
      console.log('üì° –û—Ç–≤–µ—Ç API –∫–ª—é—á–∞:', keyResponse.status, keyResponse.statusText)
      
      if (!keyResponse.ok) {
        const errorText = await keyResponse.text()
        console.error('‚ùå –û—à–∏–±–∫–∞ API –∫–ª—é—á–∞:', errorText)
        throw new Error(`API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: ${keyResponse.status} ${errorText}`)
      }
      
      const keyData = await keyResponse.json()
      console.log('‚úÖ API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω:', keyData.apiKey ? '–î–∞' : '–ù–µ—Ç')
      setApiKey(keyData.apiKey)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
      console.log('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤...')
      const agentsResponse = await fetch('http://localhost:3001/api/public/agents')
      console.log('üì° –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤:', agentsResponse.status, agentsResponse.statusText)
      
      if (!agentsResponse.ok) {
        const errorText = await agentsResponse.text()
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤:', errorText)
        throw new Error(`–ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${agentsResponse.status} ${errorText}`)
      }
      
      const agentsData = await agentsResponse.json()
      console.log('‚úÖ –ê–≥–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', agentsData.length, '—à—Ç—É–∫')
      
      const activeAgents = agentsData.filter((agent: Agent) => agent.is_active === 1)
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:', activeAgents.length, '—à—Ç—É–∫')
      setAgents(activeAgents)

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini
      console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini AI...')
      const ai = new GoogleGenerativeAI(keyData.apiKey)
      setGenAI(ai)
      console.log('‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')

    } catch (err) {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err)
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${err}`)
    } finally {
      setIsLoading(false)
    }
  }

  const handleStartChat = async () => {
    if (!userProfile.name.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
      return
    }
    if (!selectedAgent) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞')
      return
    }
    if (!genAI) {
      alert('AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return
    }

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    const aiModel = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
    setModel(aiModel)

    setStep('chat')

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage: Message = {
      id: Date.now().toString(),
      role: 'assistant',
      content: `–ü—Ä–∏–≤–µ—Ç, ${userProfile.name}! –Ø ${selectedAgent.name}. ${selectedAgent.personality} –ö–∞–∫ –¥–µ–ª–∞?`,
      timestamp: new Date()
    }
    setMessages([welcomeMessage])
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || !model) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputMessage.trim(),
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsTyping(true)

    try {
      const systemPrompt = `–¢—ã ${selectedAgent?.name}. ${selectedAgent?.personality}. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`
      
      const prompt = `${systemPrompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userProfile.name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: ${userMessage.content}`
      
      const result = await model.generateContent(prompt)
      const response = await result.response
      const text = response.text()

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: text,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, assistantMessage])
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsTyping(false)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    loadData()
  }, [])

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleChangeAgent = () => {
    setStep('setup')
    setMessages([])
  }

  if (isLoading) {
    return (
      <div className="app">
        <div className="main-content">
          <div className="chat-container">
            <div className="loading">
              <h2>–ó–∞–≥—Ä—É–∑–∫–∞...</h2>
              <p>–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ AI —Å–∏—Å—Ç–µ–º–µ</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="app">
        <div className="main-content">
          <div className="chat-container">
            <div className="error">
              <h3>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
              <p>{error}</p>
              <br />
              <p>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:</p>
              <ul style={{textAlign: 'left', marginTop: '1rem'}}>
                <li>Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (http://localhost:3001)</li>
                <li>API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ <a href="http://localhost:3000" target="_blank" rel="noopener noreferrer">–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏</a></li>
                <li>–°–æ–∑–¥–∞–Ω—ã –∞–≥–µ–Ω—Ç—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏</li>
              </ul>
              <button className="btn" onClick={loadData} style={{marginTop: '1rem'}}>
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="app">
      <header className="header">
        <div className="logo">SDH AI Chat Assistant</div>
        <a href="http://localhost:3000" target="_blank" rel="noopener noreferrer" className="admin-link">
          –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        </a>
      </header>

      <main className="main-content">
        <div className="chat-container">
          {step === 'setup' ? (
            <div className="setup-form">
              <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞</h2>
              
              <div className="form-group">
                <label htmlFor="userName">–í–∞—à–µ –∏–º—è:</label>
                <input
                  id="userName"
                  type="text"
                  value={userProfile.name}
                  onChange={(e) => setUserProfile(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                />
              </div>

              <div className="form-group">
                <label htmlFor="userInfo">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                <input
                  id="userInfo"
                  type="text"
                  value={userProfile.info}
                  onChange={(e) => setUserProfile(prev => ({ ...prev, info: e.target.value }))}
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö..."
                />
              </div>

              <div className="form-group">
                <label htmlFor="agentSelect">–í—ã–±–µ—Ä–∏—Ç–µ AI –∞–≥–µ–Ω—Ç–∞:</label>
                <select
                  id="agentSelect"
                  value={selectedAgent?.id || ''}
                  onChange={(e) => {
                    const agent = agents.find(a => a.id === e.target.value)
                    setSelectedAgent(agent || null)
                  }}
                >
                  <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ --</option>
                  {agents.map(agent => (
                    <option key={agent.id} value={agent.id}>
                      {agent.name} - {agent.description || agent.personality}
                    </option>
                  ))}
                </select>
              </div>

              <button 
                className="btn" 
                onClick={handleStartChat}
                disabled={!userProfile.name.trim() || !selectedAgent}
              >
                –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
              </button>
            </div>
          ) : (
            <div className="chat-interface">
              <div className="chat-header">
                <div className="chat-title">
                  –î–∏–∞–ª–æ–≥ —Å {selectedAgent?.name} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {userProfile.name}
                </div>
                <button className="change-agent-btn" onClick={handleChangeAgent}>
                  –°–º–µ–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
                </button>
              </div>

              <div className="messages">
                {messages.map(message => (
                  <div key={message.id} className={`message ${message.role}`}>
                    {message.content}
                  </div>
                ))}
                
                {isTyping && (
                  <div className="typing-indicator">
                    <span>{selectedAgent?.name} –ø–µ—á–∞—Ç–∞–µ—Ç</span>
                    <div className="typing-dots">
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>

              <div className="input-area">
                <input
                  type="text"
                  className="message-input"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  disabled={isTyping}
                />
                <button
                  className="send-btn"
                  onClick={handleSendMessage}
                  disabled={!inputMessage.trim() || isTyping}
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  )
}

export default App
