const axios = require('axios');

/**
 * SDH Global AI Assistant API Client –¥–ª—è Node.js
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * const client = new SDHAIClient();
 * await client.login('admin', 'admin123');
 * const settings = await client.getSettings();
 */
class SDHAIClient {
  constructor(baseURL = 'http://localhost:3001/api') {
    this.baseURL = baseURL;
    this.token = null;
    
    this.api = axios.create({
      baseURL: this.baseURL,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.api.interceptors.request.use((config) => {
      if (this.token) {
        config.headers.Authorization = `Bearer ${this.token}`;
      }
      return config;
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.api.interceptors.response.use(
      (response) => response,
      (error) => {
        if (error.response?.status === 401) {
          this.token = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ 401
        }
        throw new APIError(
          error.response?.data?.error || error.message,
          error.response?.status || 500,
          error.response?.data
        );
      }
    );
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
   * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} password - –ü–∞—Ä–æ–ª—å
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async login(username, password) {
    try {
      const response = await this.api.post('/auth/login', {
        username,
        password
      });
      
      if (response.data.success) {
        this.token = response.data.token;
        return {
          success: true,
          user: response.data.user,
          token: response.data.token
        };
      }
      
      throw new Error('Login failed');
    } catch (error) {
      console.error('Login error:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async healthCheck() {
    try {
      const response = await this.api.get('/health');
      return response.data;
    } catch (error) {
      console.error('Health check failed:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  async getSettings() {
    try {
      const response = await this.api.get('/settings');
      return response.data.settings || [];
    } catch (error) {
      console.error('Failed to get settings:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {string} key - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @returns {Promise<Object>} –ù–∞—Å—Ç—Ä–æ–π–∫–∞
   */
  async getSetting(key) {
    try {
      const response = await this.api.get(`/settings/${key}`);
      return response.data.setting;
    } catch (error) {
      console.error(`Failed to get setting ${key}:`, error.message);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {string} key - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {string} value - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateSetting(key, value) {
    try {
      const response = await this.api.put(`/settings/${key}`, { value });
      return response.data;
    } catch (error) {
      console.error(`Failed to update setting ${key}:`, error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {string} key - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ
   * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ
   * @param {string} type - –¢–∏–ø (string, boolean, number, password)
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
   */
  async createSetting(key, value, description = '', type = 'string') {
    try {
      const response = await this.api.post('/settings', {
        key,
        value,
        description,
        type
      });
      return response.data;
    } catch (error) {
      console.error(`Failed to create setting ${key}:`, error.message);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {string} key - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteSetting(key) {
    try {
      const response = await this.api.delete(`/settings/${key}`);
      return response.data;
    } catch (error) {
      console.error(`Failed to delete setting ${key}:`, error.message);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
   */
  async testGeminiAPI() {
    try {
      const response = await this.api.get('/test/gemini');
      return response.data;
    } catch (error) {
      console.error('Gemini API test failed:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –∫–ª—é—á–∞
   * @returns {Promise<string>} API –∫–ª—é—á
   */
  async getPublicAPIKey() {
    try {
      const response = await this.api.get('/public/apikey');
      return response.data.apiKey;
    } catch (error) {
      console.error('Failed to get public API key:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∞–≥–µ–Ω—Ç–æ–≤
   */
  async getAgents() {
    try {
      const response = await this.api.get('/public/agents');
      return response.data.agents || [];
    } catch (error) {
      console.error('Failed to get agents:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @returns {boolean} –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  isAuthenticated() {
    return !!this.token;
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  logout() {
    this.token = null;
  }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
 */
class APIError extends Error {
  constructor(message, status = 500, data = null) {
    super(message);
    this.name = 'APIError';
    this.status = status;
    this.data = data;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { SDHAIClient, APIError };

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function example() {
  const client = new SDHAIClient();
  
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    await client.login('admin', 'admin123');
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
    const health = await client.healthCheck();
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', health.message);
    
    console.log('‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    const settings = await client.getSettings();
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', settings.length);
    
    settings.forEach(setting => {
      console.log(`   - ${setting.key}: ${setting.value} (${setting.type})`);
    });
    
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    const defaultModel = await client.getSetting('default_model');
    console.log('‚úÖ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultModel.value);
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API...');
    const geminiTest = await client.testGeminiAPI();
    if (geminiTest.success) {
      console.log('‚úÖ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('üìä –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:', geminiTest.response_time || 0, '–º—Å');
      console.log('ü§ñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:', geminiTest.modelsCount || 0);
    }
    
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    await client.updateSetting('enable_audio', 'true');
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    
    console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤...');
    const agents = await client.getAgents();
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤:', agents.length);
    
  } catch (error) {
    if (error instanceof APIError) {
      console.error(`‚ùå API –û—à–∏–±–∫–∞ [${error.status}]:`, error.message);
      if (error.data) {
        console.error('   –î–µ—Ç–∞–ª–∏:', error.data);
      }
    } else {
      console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  example();
}
